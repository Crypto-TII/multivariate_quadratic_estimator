from sage.arith.misc import is_prime_power
from sage.functions.log import log
from sage.functions.other import ceil
from mpkc.nmonomial_series import NMonomialSeries


def ngates(q, n):
    """
    Return the number of gates for the given number of multiplications in a finite field

    INPUT:

    - ``q`` -- order of the finite field
    - ``n`` -- no. of multiplications

    EXAMPLES::

        sage: from mpkc.utils import ngates
        sage: ngates(16, 2**16)
        2359296

    TESTS::

        sage: ngates(6, 2**16)
        Traceback (most recent call last):
        ...
        ValueError: q must be a prime power
    """
    if not is_prime_power(q):
        raise ValueError("q must be a prime power")
    return n * (2 * log(q, 2) ** 2 + log(q, 2))


def nbits(q, n):
    """
    Return the number of bits required to store `n` elements of a finite field

    - ``q`` -- order of the finite field
    - ``n`` -- no. of field elements

    EXAMPLES::

        sage: from mpkc.utils import nbits
        sage: nbits(4, 256)
        512
    """
    return ceil(log(q, 2)) * n


def nmonomials_of_degree(d, n, q=None):
    """
    Return the number of `n`-variables monomials of degree `d`

    .. NOTE::

        If `q` is provided, then it considers the monomials in a ring modulo the ideal generated by the field equations

    INPUT:

    - ``d`` -- degree
    - ``n`` -- no. of variables
    - ``q`` -- order of finite field (default: None)

    EXAMPLES::

        sage: from mpkc.utils import nmonomials_of_degree
        sage: nmonomials_of_degree(d=2, n=10)
        55
        sage: nmonomials_of_degree(d=2, n=10, q=2)
        45
    """
    series = NMonomialSeries(n, q)
    return series.nmonomials_of_degree(d)


def nmonomials_up_to_degree(d, n, q=None):
    """
    Return the number of `n`-variables monomials up to degree `d`

    .. NOTE::

        If `q` is provided, then it considers the monomials in a ring modulo the ideal generated by the field equations

    INPUT:

    - ``d`` -- degree
    - ``n`` -- no. of variables
    - ``q`` -- order of finite field (default: None)

    EXAMPLES::

        sage: from mpkc.utils import nmonomials_up_to_degree
        sage: nmonomials_up_to_degree(d=2, n=10)
        66
        sage: nmonomials_up_to_degree(d=2, n=10, q=2)
        56
    """
    series = NMonomialSeries(n, q)
    return series.nmonomials_up_to_degree(d)
